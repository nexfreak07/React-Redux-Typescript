type ClassValue = string | Record<string, boolean> | undefined | null
 
export const classNames = (...args: ClassValue[]): string => {
    return args.flatMap((arg)=>{
        if(!arg) return []
        if(typeof arg === "string") return [arg]
        if(typeof arg === "object"){
            return Object.entries(arg).filter(([_,value])=> Boolean(value))
            .map(([key]) => key);
        }
        return []
    }).join(" ")
}



// ðŸ›  Step by Step Example
// Example Input
// classNames(
//   "btn",
//   styles.primary,
//   { [styles.disabled]: false, [styles.outline]: true },
//   null,
//   undefined,
//   "rounded"
// )

// Step 1 â€” args received
// [
//   "btn",
//   "Button_primary__abc123",
//   { "Button_disabled__def456": false, "Button_outline__ghi789": true },
//   null,
//   undefined,
//   "rounded"
// ]

// Step 2 â€” Each argument processed with flatMap

// "btn" â†’ case 2 â†’ returns ["btn"]

// "Button_primary__abc123" â†’ case 2 â†’ returns ["Button_primary__abc123"]

// { "Button_disabled__def456": false, "Button_outline__ghi789": true } â†’ case 3

// Object.entries â†’ [["Button_disabled__def456", false], ["Button_outline__ghi789", true]]

// filter â†’ keep only true â†’ [["Button_outline__ghi789", true]]

// map â†’ â†’ ["Button_outline__ghi789"]

// null / undefined â†’ case 1 â†’ ignored

// "rounded" â†’ case 2 â†’ returns ["rounded"]

// Step 3 â€” Flatten & Join

// Everything collected:

// ["btn", "Button_primary__abc123", "Button_outline__ghi789", "rounded"]


// Join with space:

// "btn Button_primary__abc123 Button_outline__ghi789 rounded"

// âœ… Final Output

// That string is what React puts inside className="".
// Your button in HTML looks like:

// <button class="btn Button_primary__abc123 Button_outline__ghi789 rounded">
//   Click me
// </button>


// ðŸ”‘ So the functionâ€™s job is:

// Take any mix of class strings, conditionals, null/undefined.

// Filter out the falsy ones.

// Flatten them into one clean string.